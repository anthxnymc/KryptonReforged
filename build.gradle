plugins {
    id "dev.architectury.loom" version "0.11.0-SNAPSHOT"
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version "7.0.0+"
}

repositories {
    maven {
        url "https://repo.velocitypowered.com/snapshots/"
    }
    maven { name 'Jitpack'; url 'https://jitpack.io' }
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    bundle {
        // These two lines aren't technically needed but it's a good practice to have them.
        canBeResolved = true
        canBeConsumed = false
    }

    shade.transitive = false

    // Only if you want your shadowed/bundled dependencies on the classpath:
    implementation.extendsFrom bundle
}

loom {
    forge {
        mixinConfigs = [
                "krypton.mixins.json"
        ]

        dataGen {
            mod project.mod_id
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
    maven {
        url "https://repo.velocitypowered.com/snapshots/"
    }
    maven { name 'Jitpack'; url 'https://jitpack.io' }
    // in this example, we need the following maven
    // to satisfy our dependency for JEI.
    maven {
        name = "Progwml6 (Just Enough Items)"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    forge "net.minecraftforge:forge:${project.forge_version}"

    def velocity = "com.velocitypowered:velocity-native:3.2.0-SNAPSHOT"
    modImplementation velocity
    bundle velocity

    // Include LazyDFU so starting the server and client at the same time doesn't turn my computer into a fighter jet
    //modRuntime "com.github.astei:lazydfu:${project.lazydfu_version}"
}



processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

shadowJar {
    configurations = [project.configurations.bundle]

    exclude "guava-25.1-jre.jar"
    exclude "netty-handler-4.1.52.Final.jar"
    exclude "checker-qual-3.6.1.jar"
    exclude "jsr305-3.0.2.jar error"
    exclude "prone_annotations-2.1.3.jar"
    exclude "j2objc-annotations-1.1.jar"
    exclude "animal-sniffer-annotations-1.14.jar"
    exclude "netty-codec-4.1.52.Final.jar"
    exclude "netty-transport-4.1.52.Final.jar"
    exclude "netty-resolver-4.1.52.Final.jar"
    exclude "netty-buffer-4.1.52.Final.jar"
    exclude "netty-common-4.1.52.Final.jar"
    exclude "netty-all-4.1.68.Final.jar"
    exclude "netty*"

    minimize()
}

remapJar {
    dependsOn(shadowJar)
    input = shadowJar.archiveFile
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {}
}
